<?php
/**
 * @file
 * LocalGov Events module file.
 */

use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\localgov_events\Form\EventsAddEditCallbacks;

/**
 * Implements hook_modules_installed().
 */
function localgov_events_modules_installed($modules) {
  // Configure optional fields.
  $directory_page = in_array('localgov_directories_page', $modules);
  $directory_venue = in_array('localgov_directories_venue', $modules);
  if ($directory_page || $directory_venue) {
    \Drupal::service('config.installer')->installOptionalConfig();
    localgov_events_optional_fields_settings($directory_page, $directory_venue);
  }
}

/**
 * Configure form settings for optional provider and venue fields.
 *
 * @param bool $directory_page
 *   If localgov_directories_page is (being) installed.
 * @param bool $directory_venue
 *   If localgov_directories_venue is (being) installed.
 */
function localgov_events_optional_fields_settings($directory_page, $directory_venue) {
  if ($directory_page || $directory_venue) {

    $form_display = \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('node.localgov_event.default');
    assert($form_display instanceof EntityFormDisplayInterface);
    $view_display = \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('node.localgov_event.default');
    assert($view_display instanceof EntityViewDisplayInterface);
    $group_location = $form_display->getThirdPartySetting('field_group', 'group_location');
    $locations = $group_location['children'];

    // Set display for localgov_event_venue field.
    if ($directory_venue) {
      if (!$form_display->getComponent('localgov_event_venue')) {
        $form_display->setComponent('localgov_event_venue', [
          'type' => 'entity_reference_autocomplete',
          'region' => 'content',
          'settings' => [
            'match_operator' => 'CONTAINS',
            'size' => '60',
            'placeholder' => '',
            'match_limit' => 10,
          ],
          'weight' => 11,
        ])->save();
        array_unshift($locations, 'localgov_event_venue');
      }
      if (!$view_display->getComponent('localgov_event_venue')) {
        $view_display->setComponent('localgov_event_venue', [
          'type' => 'entity_reference_label',
          'region' => 'content',
          'label' => 'inline',
          'weight' => 5,
        ])->save();
      }
    }

    // Set display localgov_event_provider field.
    if (!$form_display->getComponent('localgov_event_provider')) {
      $form_display->setComponent('localgov_event_provider', [
        'type' => 'entity_reference_autocomplete',
        'region' => 'content',
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'placeholder' => '',
          'match_limit' => 10,
        ],
        'weight' => 10,
      ])->save();
      array_unshift($locations, 'localgov_event_provider');
    }
    if (!$view_display->getComponent('localgov_event_provider')) {
      $view_display->setComponent('localgov_event_provider', [
        'type' => 'entity_reference_label',
        'region' => 'content',
        'label' => 'inline',
        'weight' => 4,
      ])->save();
    }

    // Set grouped location fields.
    $group_location['children'] = $locations;
    $form_display->setThirdPartySetting('field_group', 'group_location', $group_location);
    $form_display->save();
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for the views_exposed_form form.
 */
function localgov_events_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Modify the events listing exposed filters to add a nice date widget.
  if (isset($form['#id']) && $form['#id'] == 'views-exposed-form-localgov-events-listing-page-all-events') {

    // Date selection options.
    $date_options = [
      'choose' => t('Choose date range'),
      'today' => t('Today'),
      'tomorrow' => t('Tomorrow'),
      'this_week' => t('This week'),
      'this_month' => t('This month'),
      'next_month' => t('Next month'),
    ];

    $form['#attached']['library'][] = 'localgov_events/date-picker';
    $form['date_picker'] = [
      '#type' => 'fieldset',
      '#title' => t('Dates'),
      '#attributes' => ['class' => ['date-picker']],
    ];
    $form['date_picker']['dates'] = [
      '#type' => 'select',
      '#options' => $date_options,
      '#attributes' => ['class' => ['js-date-picker']],
    ];
    $form['date_picker']['start'] = [
      '#type' => 'date',
      '#title' => t('Start date'),
      '#date_date_format' => 'Y-m-d',
      '#attributes' => [
        'type'=> 'date',
        'class' => ['js-date-picker-start'],
      ],
    ];
    unset($form['start']);
    $form['date_picker']['end'] = [
      '#type' => 'date',
      '#title' => t('End date'),
      '#date_date_format' => 'Y-m-d',
      '#attributes' => [
        'type'=> 'date',
        'class' => ['js-date-picker-end'],
      ],
    ];
    unset($form['end']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_localgov_event_form form.
 */
function localgov_events_form_node_localgov_event_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //  Configure node add form.
  EventsAddEditCallbacks::configureNodeForm($form);
}

/**
 * Implements hook_form_FORM_ID_alter() for node_localgov_event_edit_form form.
 */
function localgov_events_form_node_localgov_event_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Configure node edit form.
  EventsAddEditCallbacks::configureNodeForm($form);
}
